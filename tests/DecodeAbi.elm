module DecodeAbi exposing (GetVals, complexStorage, decodeInt, getVals, getValsCallData, getValsDecoder)

-- import Fuzz exposing (Fuzzer, int, list, string)

import Abi.Decode as Abi
import BigInt exposing (BigInt)
import Expect
import Test exposing (..)



-- Abi Decoders


decodeInt : Test
decodeInt =
    describe "Int Decoding"
        [ test "int with 1 at start" <|
            \_ ->
                Abi.fromString Abi.int "0x1000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "4096")
        , test "zero int" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "0")
        , test "int with 1 at end" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000001"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "1")
        , test "int with all f's" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-1")
        , test "int 2" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000002"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "2")
        , test "int -2" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-2")
        , test "int with letter at start" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000000a"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "10")
        , test "int -10" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-10")
        , test "int 11" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000000b"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "11")
        , test "int -11" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-11")
        , test "max positive int8" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000007f"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "127")
        , test "int -127" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-127")
        , test "max negative int8" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-128")
        , test "max positive int16" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000007fff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "32767")
        , test "int -32767" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8001"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-32767")
        , test "max negative int16" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-32768")
        , test "max positive int256" <|
            \_ ->
                Abi.fromString Abi.int "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "57896044618658097711785492504343953926634992332820282019728792003956564819967")
        , test "max negative int256" <|
            \_ ->
                Abi.fromString Abi.int "0x8000000000000000000000000000000000000000000000000000000000000000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-57896044618658097711785492504343953926634992332820282019728792003956564819968")
        ]



-- ComplexStorage Test
-- TODO Need to test string[] - dynamic type of another dynamic type


complexStorage : Test
complexStorage =
    describe "Contract Call Decoding"
        [ test "decode ComplexStorage.getVals()" <|
            \_ ->
                Abi.fromString getValsDecoder getValsCallData
                    |> Expect.equal getVals
        ]


getValsDecoder : Abi.AbiDecoder GetVals
getValsDecoder =
    Abi.abiDecode GetVals
        |> Abi.andMap Abi.uint
        |> Abi.andMap Abi.int
        |> Abi.andMap Abi.bool
        |> Abi.andMap Abi.int
        |> Abi.andMap (Abi.staticArray 2 Abi.bool)
        |> Abi.andMap (Abi.dynamicArray Abi.int)
        |> Abi.andMap (Abi.dynamicArray Abi.uint)
        |> Abi.andMap Abi.string
        |> Abi.andMap Abi.string
        |> Abi.andMap (Abi.staticBytes 16)
        |> Abi.andMap (Abi.dynamicArray (Abi.staticArray 4 (Abi.staticBytes 2)))


getVals : Result String GetVals
getVals =
    let
        b2Vec =
            [ "0x1234", "0x5678", "0xffff", "0x0000" ]

        v3Val =
            BigInt.fromString
                "-999999999999999999999999999999999999999999999999999999999999999"
                |> Result.fromMaybe "Error decoding bigInt in Tests.Abi.makeGetVals"

        makeGetVals bigInt =
            { v0 = BigInt.fromInt 123
            , v1 = BigInt.fromInt -128
            , v2 = True
            , v3 = bigInt
            , v4 = [ True, False ]
            , v5 =
                [ BigInt.fromInt 1
                , BigInt.fromInt 2
                , BigInt.fromInt 3
                , bigInt
                , BigInt.fromInt -10
                , BigInt.fromInt 1
                , BigInt.fromInt 2
                , BigInt.fromInt 34
                ]
            , emptyArray = []
            , v6 = "wtf mate"
            , v7 = ""
            , v8 = "0x31323334353637383930313233343536"
            , v9 = [ b2Vec, b2Vec, b2Vec ]
            }
    in
    Result.map makeGetVals v3Val


type alias GetVals =
    { v0 : BigInt
    , v1 : BigInt
    , v2 : Bool
    , v3 : BigInt
    , v4 : List Bool
    , v5 : List BigInt
    , emptyArray : List BigInt
    , v6 : String
    , v7 : String
    , v8 : String
    , v9 : List (List String)
    }



-- getValsCallData : String
-- getValsCallData =
--     "0x000000000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000000000000000000000000000000000000000000000000000000000001fffffffffffd91b2cf1333cdea2270cea82d81dc5342301980000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000260313233343536373839303132333435360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000008777466206d617465000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000312340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"


getValsCallData : String
getValsCallData =
    "0x000000000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000000000000000000000000000000000000000000000000000000000001fffffffffffd91b2cf1333cdea2270cea82d81dc5342301980000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003203132333435363738393031323334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008777466206d6174650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000312340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002b74657374696e677468697373686f756c6462657175697465616269746c6f6e6765727468616e31776f7264000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000773686f727465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017300000000000000000000000000000000000000000000000000000000000000"



--
-- 000000000000000000000000000000000000000000000000000000000000007b - 0 -  uint
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80 - 32 -  int
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 -  bool
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 96 -  int224
-- 0000000000000000000000000000000000000000000000000000000000000001 - 128 -  bool[2] (0)
-- 0000000000000000000000000000000000000000000000000000000000000000 - 160 -  bool[2] (1)
-- 00000000000000000000000000000000000000000000000000000000000001a0 - 192 -  int[] - intList pointer (416)
-- 00000000000000000000000000000000000000000000000000000000000002c0 - 224 -  uint[] - emptyArray pointer (704)
-- 00000000000000000000000000000000000000000000000000000000000002e0 - 256 -  string - stringVal pointer (736)
-- 0000000000000000000000000000000000000000000000000000000000000320 - 288 -  string - emptyString pointer (800)
-- 3132333435363738393031323334353600000000000000000000000000000000 - 320 -  bytes16
-- 0000000000000000000000000000000000000000000000000000000000000340 - 352 -  bytes2[4][] - bytes2VectorListVal pointer (832)
-- 00000000000000000000000000000000000000000000000000000000000004e0 - 384 -  string[] - arrayOfString pointer (1248)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 416 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 448 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 480 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 512 -
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 544 -
-- fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6 - 576 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 640 -
-- 0000000000000000000000000000000000000000000000000000000000000022 - 672 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 704 - emptyArray (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 736 -
-- 777466206d617465000000000000000000000000000000000000000000000000 - 768 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 800 - emptyString (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 832 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 864 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 896 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 928 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 960 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 992 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1024 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1056 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1088 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 1120 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1152 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1184 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1216 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 1248 -
-- 0000000000000000000000000000000000000000000000000000000000000060 - 1280 -
-- 00000000000000000000000000000000000000000000000000000000000000c0 - 1312 -
-- 0000000000000000000000000000000000000000000000000000000000000100 - 1344 -
-- 000000000000000000000000000000000000000000000000000000000000002b - 1376 -
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 1408 -
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 1440 -
-- 0000000000000000000000000000000000000000000000000000000000000007 - 1472 -
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 1504 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 1536 -
-- 7300000000000000000000000000000000000000000000000000000000000000 - 1568 -
-- 000000000000000000000000000000000000000000000000000000000000007b - 0 - uint
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80 - 32 - int
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 - bool
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 96 - int224
-- 0000000000000000000000000000000000000000000000000000000000000001 - 128 - bool[2] (0)
-- 0000000000000000000000000000000000000000000000000000000000000000 - 160 - bool[2] (1)
-- 0000000000000000000000000000000000000000000000000000000000000180 - 192 - int[] - intList pointer (384)
-- 00000000000000000000000000000000000000000000000000000000000002a0 - 224 - string - stringVal pointer (672)
-- 00000000000000000000000000000000000000000000000000000000000002e0 - 256 - string - emptyString pointer (736)
-- 3132333435363738393031323334353600000000000000000000000000000000 - 288 - bytes16
-- 0000000000000000000000000000000000000000000000000000000000000300 - 320 - bytes2[4][] - bytes2VectorListVal pointer (768)
-- 00000000000000000000000000000000000000000000000000000000000004a0 - 352 - string[] - arrayOfString pointer (1184)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 384 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 416 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 448 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 480 -
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 512 -
-- fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6 - 544 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 576 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000022 - 640 -
-- 0000000000000000000000000000000000000000000000000000000000000008 - 672 -
-- 777466206d617465000000000000000000000000000000000000000000000000 - 704 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 736 - emptyString (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 768 - bytes2VectorListVal (size 3) (dynamic array of three 4-value static arrays of bytes2)
-- 1234000000000000000000000000000000000000000000000000000000000000 - 800 - bytes2VectorListVal[0][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 832 - bytes2VectorListVal[0][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 864 - bytes2VectorListVal[0][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 896 - bytes2VectorListVal[0][3]
-- 1234000000000000000000000000000000000000000000000000000000000000 - 928 - bytes2VectorListVal[1][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 960 - bytes2VectorListVal[1][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 992 - bytes2VectorListVal[1][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1024 - bytes2VectorListVal[1][3]
-- 1234000000000000000000000000000000000000000000000000000000000000 - 1056 - bytes2VectorListVal[2][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1088 - bytes2VectorListVal[2][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1120 - bytes2VectorListVal[2][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1152 - bytes2VectorListVal[2][3]
-- 0000000000000000000000000000000000000000000000000000000000000003 - 1184 - arrayOfString (size 3)
-- 0000000000000000000000000000000000000000000000000000000000000060 - 1216 -
-- 00000000000000000000000000000000000000000000000000000000000000c0 - 1248 -
-- 0000000000000000000000000000000000000000000000000000000000000100 - 1280 -
-- 000000000000000000000000000000000000000000000000000000000000002b - 1312 -
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 1344 -
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 1376 -
-- 0000000000000000000000000000000000000000000000000000000000000007 - 1408 -
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 1440 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 1472 -
-- 7300000000000000000000000000000000000000000000000000000000000000 - 1504 -
